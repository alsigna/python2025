[project]
name = "python2025"
version = "0.1.0"
description = ""
authors = [{ name = "Your Name", email = "you@example.com" }]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pyyaml (>=6.0.2,<7.0.0)",
    "pydantic (>=2.11.4,<3.0.0)",
    "scrapli (>=2025.1.30,<2026.0.0)",
    "scrapli-community (>=2025.1.30,<2026.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "uvloop (>=0.21.0,<0.22.0)",
    "confluent-kafka (>=2.10.0,<3.0.0)",
    "aiokafka (>=0.12.0,<0.13.0)",
    "wemake-python-styleguide (>=1.1.0,<2.0.0) ; python_version >= \"3.11\" and python_version < \"4.0\"",
]


[tool.poetry]
package-mode = false


[tool.poetry.group.dev.dependencies]
ipython = "^9.2.0"
mypy = "^1.15.0"
ruff = "^0.11.9"
types-netaddr = "^1.3.0.20240530"
types-pyyaml = "^6.0.12.20250516"
black = "^25.1.0"
flake8 = "^7.2.0"
flake8-pyproject = "^1.2.3"
radon = "^6.0.1"


[tool.black]
line-length = 120


[tool.flake8]
exclude = ["venv", ".venv", ".git", "__pycache__"]
select = "WPS"
ignore = [
    "WPS421", # Found wrong function call: {}
    "WPS102", # Found incorrect module name pattern
]
per-file-ignores = [
    "03.output_collect.py:WPS221,WPS407", # отключаем на уровне файла
]
max-jones-score = 10 # WPS200
max-line-complexity = 10 # WPS221
max-cognitive-score = 10 # WPS231
allowed-domain-names = [ # некоторые проверки позволяют себя настраивать
    "value",
    "data",
    "item",
    "result",
]

[tool.ruff]
# https://docs.astral.sh/ruff/settings
extend-exclude = ["__init__.py"]
line-length = 120
lint.pydocstyle.convention = "google"
lint.select = [
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "E",    # pycodestyle.error
    "W",    # pycodestyle.warning
    "F",    # pyflakes
    "S",    # flake8-bandit
    "D",    # pydocstyle
    "I",    # isort
    "C90",  # maccabe
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "ERA",  # flake8-eradicate
    "SLOT", # flake8-slots
]
lint.ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in `__init__`
    "S101",   # Use of `assert` detected
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "ERA001", # Remove commented-out code
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = false
